/**
 * Created by jscott on 1/1/16.
 * Refs: https://github.com/rweng/jquery-datatables-rails
 *       http://api.jquery.com/jQuery.getJSON/
 *       http://getbootstrap.com/components/#panels
 *       http://datatables.net
 */


var logEnabled = <%= Rails.env.development? %>,
    csrfToken,
    controllerAction,
    controllerName,
    accessibleUrl,
    userTable,
    accessTable,
    contentTable,
    accessibleTable,
    mcUserTable,
    mcEntriesTable,
    siStorageTable;

/**
 * Prevents debuging messages from going to console none development mode
 * @param message {string}  to log on console
 */
function consoleLog(message) {
    if (logEnabled) {
        console.log(message);
    }
}

/* ********************************************************
 * System Info Page: :details_sysinfo
 * ********************************************************
 */

/**
 * Collect portion of RouteInfo
 */
function handleRailsInfo(ev) {
    var pkg = $(ev.currentTarget).data(),
            dataResponse;

    console.log( "handleRailsInfo() init: " + JSON.stringify(pkg));

    $.ajax({
        headers: {'X-CSRF-Token': csrfToken, 'X-XSRF-Token': csrfToken },
        method: "GET",
        url: '/' + pkg.url
    }).done(function(data,textStatus, jqXHR) {
        dataResponse = $(jqXHR.responseText); //.find('body').contents();
        if (pkg.header.startsWith('#about')) {
            $(pkg.header).empty().append('<h2>Properties</h2>').addClass('show');
        } else {
            $(pkg.header).remove();
        }
        $(pkg.place).html( dataResponse ).fadeIn().addClass('show');

        console.log( "handleRailsInfo() success: " + textStatus + ", Response=" + dataResponse);
    }).fail(function(jqXHR, textStatus, errorThrown) {
        console.log( "handleRailsInfo() error: " + textStatus + ', thrown=' + errorThrown + ', Parms=' + JSON.stringify(pkg));
        $(pkg.place).addClass('hidden');
    });

    return false; // to stop future processing of this event
}

/* ********************************************************
 * ContentProfileDemo Page: :content_profile_demo
 * ********************************************************
 */

/**
 * AccessableTable GetObject from Selection
 * - Build URL
 * - Open alternate Window
 * - REQUIRES JQuery-Binary-Transport.js
 */
function profileTablesGetObject(ev) {
    var dataPackage = $(ev.currentTarget).data().package,
        dataResponse,
        objectUrl = $("#accessible-table tbody").data().accessibleUrl + "?id=" + dataPackage.id + ";username=" + dataPackage.username + ";content_type=" + dataPackage.content_type;

    /*
     * flag selected in related table */
    $("table.profile tbody tr").removeClass('success');
    $(ev.currentTarget).addClass('success');

    ev.preventDefault();

    if(dataPackage.hasOwnProperty('id')) {
        window.open(objectUrl, dataPackage.filename);
        consoleLog("profileTablesGetObject(" + dataPackage.username + ":" + dataPackage.id + ") Tab opened for file: " + dataPackage.filename);
    } else {
        consoleLog("profileTablesGetObject() Not a file based request - skipped");
    }


    /**  Worked but user could not detach

     $.ajax({
    headers: {'X-CSRF-Token': csrfToken, 'X-XSRF-Token': csrfToken },
    method: "GET",
    dataType: 'binary',
    url: objectUrl,
    processData: false
  }).done(function(data,textStatus) {
    window.open( URL.createObjectURL(data) );
    consoleLog( "profileTablesGetObject("+ dataPackage.username + ":" + dataPackage.id + ") success: " + textStatus );
  }).fail(function(jqXHR, textStatus, errorThrown) {
    accessibleTable.clear().draw();
    consoleLog( "profileTablesGetObject("+ dataPackage.username + ") error: " + textStatus + ', thrown=' + errorThrown + ', RequestPkg=' + JSON.stringify(dataPackage));
  });

     */

    consoleLog("profileTablesGetObject(completed) ");

    return false;
}

function runtimeDemoGetObject(ev) {
    var dataPackage = $(ev.currentTarget).data().package,
        dataResponse,
        objectUrl = $(ev.currentTarget).closest('tbody').data().accessibleUrl + "?id=" + dataPackage.id + ";username=" + dataPackage.username + ";content_type=" + dataPackage.content_type;

    ev.preventDefault();

    if(dataPackage.hasOwnProperty('id')) {
        window.open(objectUrl, dataPackage.filename);
        consoleLog("runtimeDemoGetObject(" + dataPackage.username + ":" + dataPackage.id + ") Tab opened for file: " + dataPackage.filename);
    } else {
        consoleLog("runtimeDemoGetObject() Not a file based request - skipped");
    }

    consoleLog("runtimeDemoGetObject(completed) ");

    return false;
}

/**
 * Content/Access Profile Table Selection
 * - fire ajax to get data, using url on accessible-table tbody
 * - then update accessible-table rows
 */
function profileTablesRequester(ev) {
    var dataPackage = $(ev.currentTarget).data().package,
            contentType = dataPackage.hasOwnProperty('resource_options'), // then AccessProfile
            dataResponse,
            profileType;

    if (contentType) {
        accessibleUrl = $("#access-table tbody").data().accessibleUrl;
        profileType = "AccessProfile";
    } else {
        accessibleUrl = $("#content-table tbody").data().accessibleUrl;
        profileType = "ContentProfile";
      // remove content_selects and topic_selects for entries
      delete dataPackage['content_selects'];
      delete dataPackage['topic_selects'];
    }

    /*
     * flag selected in related table */
    $("table.profile tbody tr").removeClass('success');
    $(ev.currentTarget).addClass('success');

    $.ajax({
        headers: {'X-CSRF-Token': csrfToken, 'X-XSRF-Token': csrfToken },
        method: "GET",
        dataType: "json",
        contentType: 'json',
        url: accessibleUrl,
        data: dataPackage,
        accepts: 'json'
    })
    .done(function(data,textStatus) {
        dataResponse = data.package;
        replaceAccessibleTableRows(dataResponse);
        consoleLog( "profileTablesRequester("+ profileType + ") success: " + textStatus + ", Response=" + JSON.stringify(dataResponse));
    })
    .fail(function(jqXHR, textStatus, errorThrown) {
        accessibleTable.clear().draw();
        consoleLog( "profileTablesRequester("+ profileType + ") error: " + textStatus + ', thrown=' + errorThrown + ', RequestPkg=' + JSON.stringify(dataPackage));
    });

    return false;
}

/**
 * Reloads the access-table with supplied rows from a accessProfile package
 * @param dataPackage {accessProfile}
 */
function replaceAccessTableRows(dataPackage) {
    var tTitle = $('#access-title'),
            vList = dataPackage.access_profile.entries,
            newRow = [],
            counter = 0,
            trNode,
            trRow;

    tTitle.html(dataPackage.message);
    if (dataPackage.success) {
        accessTable.clear().draw();

        $.each(vList, function(index, row) {
            newRow = [];
            newRow.push('<td>' + row.description  + '</td>');
            newRow.push('<td>' + row.content_type  + '</td>');
            newRow.push('<td>' + row.content_type_description  + '</td>');
            newRow.push('<td>' + row.topic_type  + '</td>');
            newRow.push('<td>' + JSON.stringify(row.topic_value)  + '</td>');
            newRow.push('<td>' + JSON.stringify(row.content_value)  + '</td>');
            trRow = $('<tr>').append(newRow.join());

            trNode = accessTable.row.add(trRow).draw().node();
            $(trNode).data('package', row).on( "click", profileTablesRequester);
            counter = index + 1;
        });
    } else {
        accessTable.clear().draw();
        accessibleTable.clear().draw();
    }

    consoleLog('replaceAccessTableRows(rowsAdded=' + counter + ')');
    return false;
}

/**
 * Reloads the content-table with supplied rows from a contentProfile package
 * @param dataPackage {contentProfile}
 */
function replaceContentTableRows(dataPackage) {
    var tTitle = $('#content-title'),
            vList = dataPackage.content_profile.entries,
            newRow = [],
            counter = 0,
            trNode,
            trRow;

    tTitle.html(dataPackage.message);
    if (dataPackage.success) {

        contentTable.rows().remove().draw();

        $.each(vList, function(index, row) {
            newRow = [];
            newRow.push('<td>' + row.description  + '</td>');
            newRow.push('<td>' + row.content_type  + '</td>');
            newRow.push('<td>' + row.content_type_description  + '</td>');
            newRow.push('<td>' + row.topic_type  + '</td>');
            newRow.push('<td>' + JSON.stringify(row.topic_value)  + '</td>');
            newRow.push('<td>' + JSON.stringify(row.content_value)  + '</td>');
            trRow = $('<tr>').append(newRow.join());

            trNode = contentTable.row.add(trRow).draw().node();
            $(trNode).data('package', row).on( "click", profileTablesRequester);
            counter = index + 1;
        });
    } else {
        contentTable.rows().remove().draw();
        accessibleTable.rows().remove().draw();
    }

    consoleLog('replaceContentTableRows(rowsAdded=' + counter + ')');
    return false;
}

/**
 * Reloads the accessible-table with supplied rows from a Profile package
 * @param dataPackage {ProfileEntry}
 *
 * dataPackage = {success: true, message: "", content: 'access',
 *                username: pg_u.username, display_name: pg_u.display_name ,
 *                package: [
 *                  {source: "datafiles", filename: "someFile.dat", created: '12/1/2015', size: "0"},
 *                  ...
 *                         ]
 *                }
 */
function replaceAccessibleTableRows(dataPackage) {
    var tTitle = $('#accessible-title'),
            vList = dataPackage.payload,
            newRow = [],
            counter = 0,
            trNode,
            trRow;

    tTitle.html(dataPackage.message);
    if (dataPackage.success) {
        accessibleTable.clear().draw();
        $.each(vList, function(index, row) {
            newRow = [];
            newRow.push('<td>' + row.filename  + '</td>');
            newRow.push('<td>' + row.source  + '</td>');
            newRow.push('<td>' + row.created  + '</td>');
            newRow.push('<td>' + row.size  + '</td>');
            trRow = $('<tr>').append(newRow.join());

            trNode = accessibleTable.row.add(trRow).draw().node();

            $(trNode).data('package', row).on("click", profileTablesGetObject);

            counter = index + 1;
        });
    } else {
        accessibleTable.clear().draw();
        $("table.profile tbody tr").removeClass('success');
    }

    consoleLog('replaceAccessibleTableRows(rowsAdded=' + counter + ')');
    return false;
}

/**
 * Initialization Routine for Demo Pages
 * @returns {boolean}
 */
function handleDemoPages() {

    accessibleUrl = $("#accessible-table tbody").data().accessibleUrl;

    accessTable = $('#access-table').DataTable({
        language: {
            emptyTable: "Please make a choice from the Users table on the left."
        }
    });

    contentTable = $('#content-table').DataTable({
        language: {
            emptyTable: "Please make a choice from the Users table on the left."
        }
    });

    accessibleTable = $('#accessible-table').DataTable({
        language: {
            emptyTable: "Please make a choice from content table above."
        }
    });

    userTable = $('#users-table').DataTable({
        scrollY: "620px",
        language: {
            emptyTable: "No User Available!"
        }
    });


    /**
     *  Activate the UI, Track clicks from UsersTable to control both pages
     */
    var userRows = $('#users-table tbody tr');


    userRows.on('click', function (event) {
        var dataPackage = $(event.currentTarget).data().package;

        /*
         Initialize Title on Accessible Content Table
         */
        $('#accessible-title').
                html('Accessible Content for ' +
                      dataPackage.username + ":" +
                      dataPackage.display_name
                    );

        /* maintain accessibleTable's state */
        accessibleTable.clear().draw();

        /* maintain selected item on users table */
        userRows.removeClass('success');
        $(event.currentTarget).addClass('success');

        /*
         * Table loaders */
        replaceAccessTableRows(dataPackage.package[0]);
        replaceContentTableRows(dataPackage.package[1]);

        consoleLog(dataPackage.username + " Selected. "); // + JSON.stringify(dataPackage));
    });

    /* choose first one to start things off */
    userRows.first().click();
    consoleLog("handleDemoPages() Enabled!");

    return true;
} // end function


/* ********************************************************
 * ManageContentProfiles Page: :manage_content_profiles
 * ********************************************************
 */

/**
 * Reloads the mc-entries-table with supplied rows from a
 * @param dataPackage
 */
function replaceEntriesTableRows(dataPackage) {
    var vList = dataPackage.entries,
            newRow = [],
            counter = 0,
            trNode,
            trRow,
            deleteUrla = '<td><a class="btn delete" data-confirm="',
            deleteUrlb = '" data-method="delete" href="/profiles/delete_entry_for_user?id=',
            deleteUrlc = '" rel="nofollow"><i class="fa fa-trash-o fa-lg" title="Delete Content Profile Entry" aria-hidden="true"></i></a></td>',
            deleteLink;

    if (dataPackage.profile_exist) {
        mcEntriesTable.clear().draw();

        $.each(vList, function(index, row) {
            newRow = [];
            newRow.push('<td>' + row.description  + '</td>');
            newRow.push('<td>' + row.content_type  + '</td>');
            newRow.push('<td>' + row.content_type_description  + '</td>');
            newRow.push('<td>' + row.topic_type  + '</td>');
            newRow.push('<td>' + row.topic_type_description  + '</td>');
            newRow.push('<td>' + row.topic_value.join(',')  + '</td>');
            newRow.push('<td>' + JSON.stringify(row.content_value)  + '</td>');
            deleteLink = deleteUrla +
                              'Deleting: [' + row.description + '], entry.  Are you sure?' +
                              deleteUrlb + row.id + '&amp;pak=' + dataPackage.pak + deleteUrlc;
          newRow.push(deleteLink);
            trRow = $('<tr class="entry">').append(newRow.join());

            trNode = mcEntriesTable.row.add(trRow).draw().node();
            $(trNode).data('package', row);

          counter = index + 1;
        });

        $('#create-entry-action').removeAttr('disabled');

    } else {
      $('#create-entry-action').attr('disabled', 'disabled');
      mcEntriesTable.clear().draw();
    }
  $('#content-entry-modal input[name="username"]').val(dataPackage.username);
  $('#content-entry-modal input[name="pak"]').val(dataPackage.pak);
  $('#content-entry-label').text('Create Content Profile Entry for ' + dataPackage.username);

    consoleLog('replaceEntriesTableRows(rowsAdded=' + counter + ') ');
    return false;
}


/**
 * Initialization Routine for ContentProfile Management Pages
 * @returns {boolean}
 */
function handleManagementPages() {

    mcUserTable = $('#mc-users-table').DataTable({
        scrollY: "620px",
        language: {
            emptyTable: "No User Available!"
        }
    });

    mcEntriesTable = $('#mc-entries-table').DataTable({
        scrollY: "620px",
        language: {
            emptyTable: "No Entries Available!"
        }
    });


    /**
     *  Activate the UI, Track Actions from UsersTable
    */
    $('#mc-users-table tbody tr a.btn').on('click', function (event) {
      var dataPackage = $(event.currentTarget).closest('tr').data().package;
      var title = $(event.currentTarget).find('i').attr('title');
      var targetPak = $(event.currentTarget).data().url;

      event.preventDefault();
      event.stopPropagation();

      $('#content-profile-modal input[name="username"]').val(dataPackage.username);
      $('#content-profile-modal input[name="id"]').val(dataPackage.pak);
      $('#content-profile-modal form').attr('action', targetPak); // sets new value
      $('#content-profile-label').text(title);

      console.log( "Selected Icon() title: " + title +", url: " + targetPak + " data: " + dataPackage.username);

      $('#content-profile-modal').modal('show');
      return false;
    });

  /*
   * Enable Row selection to preload Entries Table
   */
    $('#mc-users-table tbody tr.profile').on('click', function (event) {
      var dataPackage = $(event.currentTarget).data().package;

      /* maintain selected item on users table */
      $('#mc-users-table tbody tr.profile').removeClass('success');
      $(event.currentTarget).addClass('success');

      /* update content profile entries table */
      replaceEntriesTableRows(dataPackage);
      return false;
    });

    /**
     * Handle CreateProfileEntry Dependent Select Options
     */
    $('#content-entry-modal select:not([multiple])').on('change', function(event) {
      var pkg = $(event.currentTarget).children(':selected').data(),
          optsTarget = $(event.currentTarget).closest('.form-group').find('select[multiple]');

      event.preventDefault();
      event.stopPropagation();

      optsTarget.empty();
      $.each(pkg.opts, function(index, opt) {
        optsTarget.append('<option value="' + opt[1] + '">' + opt[0] + ': ' + opt[2].data.description + '</option>');
      });

      console.log( "Topic Selected: topic: " + $(event.currentTarget).val() + ", data.opts: " + JSON.stringify(pkg.opts));
      return false;
    });
    /* make initial selection */
    $('#content-entry-modal select:not([multiple])').change();

    /* Watch the Tabs change, dataTable header don't align when invisible
     * then try to update the DataTable on that page.
     * events = 'show|shown.bs.tab'   shown works */
    $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
        var target = $(e.target).data().dttable; // activated tab
        if (target != 'no') {
            $(target).dataTable().api().draw();
        }
        return true;
    });

    $('#mc-users-table tbody tr.profile').first().click();

    consoleLog("handleManagementPages() Enabled!");

    return true;
} // end function


/* ********************************************************
 * JQuery Enabled Processing
 * ********************************************************
 */
$(function() {

    controllerAction = $('body').data().controllerAction;
    controllerName = $('body').data().controllerName;
    /* Save this token for the Ajax calls */
    csrfToken = $('meta[name="csrf-token"]').attr('content');

    /*
     * Only for the ProfilesController based pages */
    if ( controllerName.startsWith('profiles') ) {
        /*
         * Initial Establish the dataTables */
        try {
            $.extend(true, $.fn.dataTable.defaults, {
                dom: "fti",
                colReorder: false,
                fixedColumns: false,
                fixedHeader: false,
                autoWidth: true,
                paging: false,
                searching: true,
                scrollY: "420px",
                scrollCollapse: true,
                scroller: true,
                responsive: true,
                select: {
                    selector: "tr",
                    style: "single",
                    items: "row",
                    info: true
                }
            });
        } catch (e) {
            consoleLog("DataTables Defaults Failed " + e);
        }
    }

    switch (controllerAction) {
        case 'runtime_demo':
            $('table tbody tr').on("click", runtimeDemoGetObject);
            break;
        case 'edit':
            $('.selectpicker').selectpicker();
            break;

        case 'details_sysinfo':
            /*
             * Initial Establish sections
             * id="about" -  <a href="rails/info/properties" onclick="getRailsInfo('about-content'); return false;">
             *     target: <div id="about-content" style="display: none"></div>
             * id="routes" - <a href="rails/info/routes" onclick="getRailsInfo('route-content'); return false;">
             *     target: <div id="route-content" style="display: none"></div>
             */
            $('h2 > a.btn-lg').on('click', handleRailsInfo);


          siStorageTable = $('#storage-table').DataTable({
            scrollY: "420px",
            language: {
              emptyTable: "ObjectStorage is Empty!"
            }
          });

          $('#obs-panel').on('shown.bs.collapse', function () {
            siStorageTable.draw();
          });

            break;
        case 'manage_content_profiles':
            handleManagementPages();
            break;
        case 'content_profile_demo':
            handleDemoPages();
            break;
        default:
            consoleLog("Current Page (" + controllerAction + ") has no custom Javascripts enabled.");
    }
    consoleLog("Initialization Complete for: " + controllerName + "/" + controllerAction + ".");

    return false;
});

