<% provide(:title, accessed_page_name) %>

<article>

    <header class="page-header">
        <h2><%= accessed_page_name %></h2>
        <%= image_tag("AccessProfile-ContentProfile.png", alt: "ContentProfile", class: "huge-image") %>
    </header>

    <section>
        <p class="lead">
            ContentProfile and AccessProfile are implementations of the same core idea, with side benefits.  For lack
            of a better term: ContentProfile is the label adopted to represent that core idea.</p>

        <div class="well">
            <h3>Core Idea</h3>

          <p>For <strong>content authorization</strong> there is an assumption that protected resources are classified and stored in some type of <em>storage container system(SCS)</em>. An SCS might actually be a simple FileSystem or
            a enterprise class document management system.  In any event, retrieving items would require we specify some meta-data to <em>retrieve a single resource</em> and different meta-data to retrieve a <em>collection of resources</em>.</p>

          <p>I chose a FileSystem as the SCS for this demo application, so filename implies a specific instance of a thing, and filename with wildcards implies a collection of things, and the file path is identity meta-data.</p>

          <p>Filepaths are a part of the TOPIC structure, filenames are a part of the CONTENT structure. A ContentProfile entry will have both structures present.</p>

          <figure>
            <figcaption>The TOPIC structure is composed of three elements</figcaption>
            <ul>
              <li>topic_type:  :string           some type of business entity like a branch, agency, store, etc.</li>
              <li>topic_value: :array-of-strings the identifier for this entity; branch number, agency number, store number, any hard and unique reference.</li>
              <li>description: :string           label for this component</li>
            </ul>
          </figure>
          <figure>
            <figcaption>The CONTENT structure is composed of three elements</figcaption>
            <ul>
              <li>content_type:  :string           textual type of item or document; commission statement, 1099 document, budget spreadsheet, etc.</li>
              <li>content_value: :array-of-strings either the collection name for this type of content, or it's specific ID</li>
              <li>description:   :string           label for this component</li>
            </ul>
          </figure>
          <p>The container for these two structures is defined as a ContentProfileEntry(CPE), which would be composed of these two structures and a descriptive label. CPEs are the final content authorization permission record.
            A user is considered to have permission to specific content only if a related CPE exists in their ContentProfile.</p>

          <p>One ContentProfileEntry describes one permission, through the combination of a fully qualified content type identifiers and topic type identifiers.  It is expected that a
          user's collection would have many of these specialized entries, and that some entries may be shareable (reducing redundancy) with other users.  Entries
            are themselves assigned to a wrapper object called a ContentProfile which maintains a users unique collection.</p>

          <p>ContentProfiles are the anchor back to the UserProfile, via the :person_authentication_key(PAK) or UUID they rely on as the primary identifier.</p>

          <p>The ContentProfile collection of classes represent the database implementation of this Content Profile strategy.</p>
          <p>The AccessProfile collection of classes represent the XML-File implementation of this Content Profile strategy as an extension to it's original role as access authorization for page views, clickables, and process access permissions.</p>


        </div>

        <div>
            <h3>Features</h3>

            <h4>A ContentProfile Implementation offers:</h4>
            <ol>
              <li><strong>ContentProfile</strong> is anchored to a specific Authenticated User, by associating and identifying the person using a permanent and persistent identifier from a trusted authentication
                  source; and manages the collection of <strong>ContentProfileEntries</strong> for that user.</li>
              <li>A <strong>ContentEntry</strong> ensures both the Topic and the Content are uniquely identified and specific to their respective types.</li>
              <li>Each <strong>TopicType</strong> identifies one type of business entity class; like an Account, Customer, Order, Product, Branch Office, Partner, etc.  Further, the <strong>TopicTypeValue</strong> contains
                the ID number/reference for that single entity.  An example being: <em>TopicType:Account, TopicTypeValue:12016</em>.</li>
              <li>Each <strong>ContentType</strong> identifies one type of business asset related to the current TopicType; like a Commission Statement for an Account, Order History Document for a
                  Customer, Profitability Report for an Order, etc.  Further, the <strong>ContentTypeValue</strong> contains the ID number/reference, or SearchTerm for that specific type asset (i.e. type, not instance id).  An example being: <em>TopicType:Account,
                  TopicTypeValue:12016, ContentType:Commission, ContentTypeValue:{docTypeID=486}</em>.</li>
              <li>Type Values may contain one or more elements as needed to specifically identify their entity; the ContentProfile class only insists on at least one value.  Values may also be simple values and not refer to
                  external sub-systems.  Here is an example of an operational value that describes the states a branch is licensed to do business
                  in: <em>TopicType:BranchOffice, TopicTypeValue:44201, ContentType:LicensedStates, ContentTypeValue:['Indiana','Michigan','Ohio']</em>.</li>
              <li>Rake Tasks to load and update selection values for Topics, Contents, and their values.  From a User Interface free-hand typing of values is not allowed, only preloaded values are allowed.</li>
              <li>Each ContentType may require a ContentAdapter class to execute the retrieval process.  The actual business asset a ContentType refers to may in fact be stored in a
                  FileSystem, or Document Management System requiring a WebService call to retrieve it; so a content type value is actually a foreign key to access remote instances of that document type.</li>
            </ol>
        </div>
        <div>
            <h3>Implementation</h3>

            <p>An implementation would include the content profile model, admin ui to manage profiles and entries, and a content adapter classes focused on retrieval of requested assets.</p>

            <p>This demonstration app contains the database content profile model, xml content profile model, sample data and xml with eight test users, admin ui, filesystem based content adapter classes, and a demo page.</p>

        </div>
    </section>
</article>
