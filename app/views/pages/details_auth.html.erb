<% provide(:title, accessed_page_name) %>

<article>

    <header class="page-header">
        <h2><%= accessed_page_name %></h2>
        <%= image_tag("SknService-Warden.jpg", alt: "ContentProfile", class: "huge-image") %>
    </header>

    <section>
        <p class="lead">
            Authentication is involved in every http request.  In order to ensure every request
            has been properly authenticated we use Warden to trap the request near the end of the Rack middleware pipeline.  Warden attempts to retrieve
            the users authenticated instance from the current session if at all possible, and passes the request through to the application controller.
        </p>
    </section>

    <section>
        <div class="col-md-6">
            <h2>UserProfile</h2>
            <p>
                The Authentication process is primarily implemented via the UserProfile class and the Warden gem.  The UserProfile processing
                is aided by the ObjectStorageContainer which caches active user profiles. And includable modules for the top level
                ApplicationController and basic User classes; which provide access to warden to retrieve the current_user among other things.
            </p>
            <p>
                The application controller uses it's module to gain access to Warden.  Whenever it receives the next http
                request it checks to see if there is a current user value.
                <ul>
                  <li>If there is no current user and requested page is protected, the controller will redirect the session to SessionsControllers#not_authenticated method, which renders a local sign-in page.</li>
                  <li>If there is a valid user but they are not authorized to access the requested page, the application controller redirects the session to the SessionsController#not_authorized method, which presents an Not Authorized Page.</li>
                  <li>For Authenticated and Authorized users the controller passes them through to their original route.</li>
                </ul>
            </p>
            <p>
                The basic User model has a module to interface it with the UserProfile, allowing the UserProfile
                to search for user objects, and extract the users person identification key; which should never,
                ever, ever change.  The UserProfile retains a reference the lower level user object until logout, preventing its garbage collection.
            </p>
            <p>
                Password reset via email is included in this application to round out its position as a fully featured starting point for your next Rails application.
            </p>
        </div>
        <div class="col-md-6">
            <h2>Warden</h2>
            <p>
                The Warden Gem provides a small collection of critical strategy.services which take no action
                unless called upon.  In the case of public pages that's exactly what happens, warden
                is never called to check authentication.
            </p>
            <p>
                For secured pages warden works with the UserProfile class to restore a cached
                user profile from the session, or by using authentication strategies - authenticate the current user.
                Should authentication fail, the application controller decides where
                to redirect the unauthenticated user; typically that's the Sign In page.
            </p>
            <p>
                When a user is authenticated, using one of several authentication strategies.  Warden calls
                the UserProfile to have that user added to the cache, and sets the current_user method for
                the controller. Likewise on logout, warden calls the UserProfile to have the current user
                removed from the cache, and clears the current_user method.
            </p>
            <p>
                Warden's authentication of a user is augmented by calling class methods on the UserProfile.  UserProfile proxies
                these authenticate calls to a lower level UserProxy, in this application its a PostgreSQL User Model.  We have included methods in that db model to authenticate the
                user and return a collection of params that the UserProfile class can use to create a valid UserProfile object.  This allows us to proxy in a LDAPUser, OAUTHUser,
                DominoUser, or any other authentications class as a source for users.
            </p>
            <p>The UserProfile object is the User and whats returned from the <code>:current_user</code> API of Warden; not the lower level proxy object.</p>
        </div>
    </section>
</article>
